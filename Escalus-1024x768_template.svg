<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:ns1="https://launchpad.net/jessyink"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   sodipodi:docname="Escalus-1024x768_template.svg"
   inkscape:version="0.91 r13725"
   version="1.1"
   id="svg2"
   viewBox="0 0 1024 768.00001"
   height="768"
   width="1024">
  <sodipodi:namedview
     inkscape:guide-bbox="true"
     showguides="true"
     inkscape:window-maximized="1"
     inkscape:window-y="-8"
     inkscape:window-x="-8"
     inkscape:window-height="1017"
     inkscape:window-width="1920"
     units="px"
     showgrid="false"
     inkscape:current-layer="layer2"
     inkscape:document-units="px"
     inkscape:cy="384.00001"
     inkscape:cx="512.00002"
     inkscape:zoom="1.1067708"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#000000"
     id="base">
    <sodipodi:guide
       id="guide4138"
       orientation="0,1024"
       position="0,0" />
    <sodipodi:guide
       id="guide4140"
       orientation="-768,0"
       position="1024,0" />
    <sodipodi:guide
       id="guide4142"
       orientation="0,-1024"
       position="1024,768.00001" />
    <sodipodi:guide
       id="guide4144"
       orientation="768,0"
       position="0,768.00001" />
    <sodipodi:guide
       inkscape:color="rgb(0,0,255)"
       inkscape:label=""
       id="guide4211"
       orientation="1,0"
       position="512,0" />
    <sodipodi:guide
       inkscape:color="rgb(0,0,255)"
       inkscape:label=""
       id="guide4213"
       orientation="0,1"
       position="0,384.00001" />
  </sodipodi:namedview>
  <title
     id="title4136">BlankPresentation-1024x768_template</title>
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title>BlankPresentation-1024x768_template</dc:title>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     sodipodi:insensitive="true"
     transform="translate(0,-284.36216)"
     id="layer1"
     inkscape:groupmode="layer"
     inkscape:label="Master"
     ns1:masterSlide="masterSlide">
    <rect
       y="284.36215"
       x="0"
       height="768"
       width="1024"
       id="rect4146"
       style="fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:2.4000001;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       style="opacity:0.85;fill:#004c52;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 0,469.51101 1024,-156.63586 0,-28.51299 -1024,0 z"
       id="path4255"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <path
       sodipodi:nodetypes="cccc"
       inkscape:connector-curvature="0"
       id="path4517"
       d="m 486,1052.3622 346.9392,-57.9623 126.65828,57.9623 z"
       style="opacity:0.85;fill:#004c52;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="ccccc"
       style="opacity:0.85;fill:#2abbad;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 292.7086,284.36216 866.12998,398.77725 1024,339.64099 l 0,-55.27883 z"
       id="path4257"
       inkscape:connector-curvature="0" />
    <path
       style="opacity:0.85;fill:#bbe863;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 788.71059,284.36216 0,318.75745 l 0,68.92236 644.92706,41.36941 z"
       id="path4259"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="10.343529"
       y="376.32922"
       id="text4261"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan4263"
         x="10.343529"
         y="376.32922"
         style="font-size:70px"
         ns1:autoText="slideTitle">Slide Title</tspan></text>
    <path
       inkscape:connector-curvature="0"
       id="path4519"
       d="m 1024,985.70531 -234.15518,66.65689 234.15518,0 z"
       style="opacity:0.85;fill:#2abbad;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       sodipodi:nodetypes="cccc" />
    <path
       inkscape:connector-curvature="0"
       id="path4515"
       d="M 1024,919.26363 852.99371,1052.3622 1024,986.10639 Z"
       style="opacity:0.85;fill:#bbe863;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       sodipodi:nodetypes="cccc" />
  </g>
  <g
     style="display:inline"
     inkscape:label="Title"
     id="layer2"
     inkscape:groupmode="layer"
     sodipodi:insensitive="true">
    <rect
       y="-1.1368684e-013"
       x="0"
       height="768"
       width="1024"
       id="rect5033"
       style="opacity:1;fill:#004c52;fill-opacity:1;stroke:none;stroke-width:2.4000001;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="ccccccc"
       inkscape:connector-curvature="0"
       id="path5039"
       d="M 0,686.41796 188.02247,741.19712 1025.8071,603.30488 1024,108.17959 705.69335,6.9326242 0,127.02886 Z"
       style="fill:#006666;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       sodipodi:nodetypes="ccccccc"
       inkscape:connector-curvature="0"
       id="path5035"
       d="M 0,113.78631 369.605,31.070348 1024,275.59184 1024,565.20989 861.23237,673.23918 0,636.72394 Z"
       style="opacity:0.85;fill:#009e91;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
    <path
       style="display:inline;opacity:0.85;fill:#00cab3;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,563.29853 435.03712,610.94588 1024,549.30612 1024,175.07591 911.06864,127.91222 0,194.83984 Z"
       id="path5931-6"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       inkscape:connector-curvature="0"
       id="path5037"
       d="M 0,523.7551 1024,546.98 1024,236.40816 0,214.20408 Z"
       style="opacity:0.85;fill:#8bd74f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       sodipodi:nodetypes="ccccc" />
    <text
       sodipodi:linespacing="125%"
       id="text4195"
       y="343.76569"
       x="510.90033"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:112.5px;text-align:center;text-anchor:middle"
         y="343.76569"
         x="528.80804"
         id="tspan4197"
         sodipodi:role="line">This is your </tspan><tspan
         id="tspan4207"
         style="font-size:112.5px;text-align:center;text-anchor:middle"
         y="484.39069"
         x="510.90033"
         sodipodi:role="line">presentation title</tspan></text>
    <flowRoot
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       id="flowRoot4199"
       xml:space="preserve"><flowRegion
         id="flowRegion4201"><rect
           y="410.759"
           x="144.53262"
           height="126.80692"
           width="170.43941"
           id="rect4203" /></flowRegion><flowPara
         id="flowPara4205" /></flowRoot>  </g>
  <g
     style="display:none"
     inkscape:label="Bullet Points"
     id="layer3"
     inkscape:groupmode="layer"
     sodipodi:insensitive="true">
    <g
       id="g5627">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="121.81092"
         y="249.88017"
         id="text4227"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan4229"
           x="121.81092"
           y="249.88017"
           style="font-size:60px">Lorem</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path5575"
         sodipodi:sides="4"
         sodipodi:cx="-96.653061"
         sodipodi:cy="-228.43486"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -96.653061,-219.19572 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g5632">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="121.81092"
         y="339.76193"
         id="text4231"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan4233"
           x="121.81092"
           y="339.76193"
           style="font-size:60px">Ipsum</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -96.653061,-314.89291 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-324.13205"
         sodipodi:cx="-96.653061"
         sodipodi:sides="4"
         id="path5577"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g5622">
      <text
         sodipodi:linespacing="125%"
         id="text4235"
         y="429.64368"
         x="121.81092"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="429.64368"
           x="121.81092"
           id="tspan4237"
           sodipodi:role="line">Dolor</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path5579"
         sodipodi:sides="4"
         sodipodi:cx="-96.653061"
         sodipodi:cy="-407.27551"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -96.653061,-398.03637 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g5617">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="123.74451"
         y="519.52545"
         id="text4239"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan4241"
           x="123.74451"
           y="519.52545"
           style="font-size:60px">Sit</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -96.653061,-487.91815 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-497.15729"
         sodipodi:cx="-96.653061"
         sodipodi:sides="4"
         id="path5581"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g5612">
      <text
         sodipodi:linespacing="125%"
         id="text4243"
         y="609.40717"
         x="127.23084"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="609.40717"
           x="127.23084"
           id="tspan4245"
           sodipodi:role="line">Amet</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path5583"
         sodipodi:sides="4"
         sodipodi:cx="-96.653061"
         sodipodi:cy="-587.96185"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -96.653061,-578.72271 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g5607">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="124.33045"
         y="699.28894"
         id="text4247"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan4249"
           x="124.33045"
           y="699.28894"
           style="font-size:60px">Consectetur</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -96.653061,-668.20898 -9.239139,-9.23914 9.239139,-9.23914 9.239139,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-677.44812"
         sodipodi:cx="-96.653061"
         sodipodi:sides="4"
         id="path5585"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:label="Headline"
     id="layer4"
     inkscape:groupmode="layer">
    <rect
       style="opacity:1;fill:#004c52;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="rect5925"
       width="1024"
       height="768"
       x="0"
       y="0" />
    <path
       style="opacity:0.85;fill:#006666;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,641.30613 843.75508,732.73472 1024,687.02042 1024,57.469393 47.02041,126.69389 0,181.55103 Z"
       id="path5927"
       inkscape:connector-curvature="0" />
    <path
       style="opacity:0.85;fill:#009e91;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,581.2245 139.7551,697.46942 1024,577.30613 1024,121.4694 599.5102,48.326533 0,275.59185 Z"
       id="path5929"
       inkscape:connector-curvature="0" />
    <path
       style="opacity:0.85;fill:#00cab3;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,543.34695 432.32653,621.7143 1024,495.02042 1024,151.51021 148.4898,193.79593 0,262.53062 Z"
       id="path5931"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       style="opacity:0.85;fill:#8bd74f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 0,470.44899 1024,19.42857 0,-227.67347 L 0,245.55103 Z"
       id="path5933"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <text
       sodipodi:linespacing="125%"
       id="text4252"
       y="355.49402"
       x="83.986679"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:90px"
         y="355.49402"
         x="83.986679"
         id="tspan4254"
         sodipodi:role="line">Transition Headline</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="61.986679"
       y="445.49402"
       id="text4256"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan4258"
         x="61.986679"
         y="445.49402"
         style="font-size:50px">Let's start with the first set of slides</tspan></text>
  </g>
  <g
     style="display:none;opacity:0.95999995"
     inkscape:label="Quote"
     id="layer5"
     inkscape:groupmode="layer"
     sodipodi:insensitive="true">
    <rect
       style="opacity:1;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="rect6558"
       width="1024"
       height="768"
       x="0"
       y="-1.1368684e-013" />
    <path
       style="display:inline;opacity:0.85;fill:#006666;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,709.22447 843.75508,768 1024,693.55101 1024,92.73467 254.69388,0 0,71.836718 Z"
       id="path5927-0"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       style="display:inline;opacity:0.85;fill:#009e91;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M -2.6122449,649.14284 141.7551,738.7347 1024,670.0408 1024,75.755088 815.02041,33.959157 0,112.32652 Z"
       id="path5929-7"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       style="display:inline;opacity:0.85;fill:#8bd74f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 0,641.7959 1024,32 0,-552.65306 L 0,97.959169 Z"
       id="path5933-7"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <g
       id="g7333">
      <rect
         transform="matrix(0.70710678,-0.70710678,0.70710678,0.70710678,0,0)"
         y="368.89532"
         x="290.2189"
         height="67.098907"
         width="67.09893"
         id="rect7288"
         style="opacity:1;fill:#00cab3;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
      <g
         id="text7290"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:125%;font-family:'Sitka Text';-inkscape-font-specification:'Sitka Text';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1">
        <path
           id="path7331"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:125px;font-family:'Sitka Text';-inkscape-font-specification:'Sitka Text'"
           d="m 518.98245,39.382618 0,-1.444444 14.33333,0 0,1.444444 -4.44444,33.944445 -5.38889,0 -4.5,-33.944445 z m -25.27778,0 0,-1.444444 14.38889,0 0,1.444444 -4.5,33.944445 -5.38889,0 -4.5,-33.944445 z"
           inkscape:connector-curvature="0" />
      </g>
    </g>
    <flowRoot
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       id="flowRoot4261"
       xml:space="preserve"><flowRegion
         id="flowRegion4263"><rect
           y="27.611187"
           x="28.633821"
           height="706.3009"
           width="964.00531"
           id="rect4265" /></flowRegion><flowPara
         id="flowPara4267" /></flowRoot>    <text
       sodipodi:linespacing="125%"
       id="text6890"
       y="176.73653"
       x="35.451172"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         id="tspan6892"
         y="176.73653"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6894"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="176.73653"
           x="35.451172"
           dx="0 0 0 0 0 0 7.2003937 0 0 0 0 0 7.2004089 0 0 0 0 0 7.2003784 0 0 0 7.2004089 0 0 0 0 0 7.2003784">Lorem ipsum dolor sit amet, consectetur </tspan></tspan><tspan
         id="tspan6896"
         y="232.98653"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6898"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="232.98653"
           x="35.451172"
           dx="0 0 0 0 0 0 0 0 0 0 0 17.001312 0 0 0 0 0 17.001282 0 0 17.001312 0 0 0 17.001282 0 0 0 0 0 0 17.001343 0 0 0 17.001282">adipiscing elit. Ut nec libero nec enim </tspan></tspan><tspan
         id="tspan6900"
         y="289.23651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6902"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="289.23651"
           x="35.451172"
           dx="0 0 0 0 0 0 0 56.637207 0 0 0 0 0 0 0 0 0 56.637207 0 0 56.637207 0 0 0 0 0 56.637207">ornare malesuada ac vitae sem. </tspan></tspan><tspan
         id="tspan6904"
         y="345.48651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6906"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="345.48651"
           x="35.451172"
           dx="0 0 0 0 0 0 0 0 0 46.793457 0 0 0 0 0 46.793457 0 0 0 0 0 0 0 46.793457 0 0 0 0 0 0 46.793457">Maecenas vitae posuere massa, a </tspan></tspan><tspan
         id="tspan6908"
         y="401.73651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6910"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="401.73651"
           x="35.451172"
           dx="0 0 0 0 0 0 0 0 0 1.1886749 0 0 0 0 0 1.1886902 0 0 0 0 0 0 0 0 0 0 1.1887207 0 0 0 0 0 1.1886597 0 0 0 0 0 1.1886597">molestie nibh. Vestibulum porta massa ac </tspan></tspan><tspan
         id="tspan6912"
         y="457.98651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6914"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="457.98651"
           x="35.451172"
           dx="0 0 0 0 0 2.7531281 0 0 0 0 0 0 0 0 0 2.7531433 0 0 0 0 2.7531128 0 0 0 0 0 0 2.7531128 0 0 0 0 0 2.7531128">erat placerat, quis semper neque viverra. </tspan></tspan><tspan
         id="tspan6916"
         y="514.23651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6918"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="514.23651"
           x="35.451172"
           dx="0 0 0 0 0 0 0 0 17.37207 0 0 0 0 0 0 0 0 0 0 0 0 17.37207 0 0 0 0 0 0 17.37207 0 0 0 17.37207">Aliquam pellentesque tortor nec neque </tspan></tspan><tspan
         id="tspan6920"
         y="570.48651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6922"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="570.48651"
           x="35.451172"
           dx="0 0 0 0 0 0 0 14.845215 0 0 0 0 0 0 0 0 0 0 14.845215 0 0 14.845215 0 0 0 0 0 0 0 0 14.845215">varius elementum. Ut pharetra eleifend </tspan></tspan><tspan
         id="tspan6924"
         y="626.73651"
         x="35.451172"
         sodipodi:role="line"><tspan
           id="tspan6926"
           style="font-size:45px;text-align:justify;text-anchor:start"
           y="626.73651"
           x="35.451172">rhoncus. Ut eu ante est.</tspan></tspan></text>
    <path
       style="opacity:1;fill:#00cab3;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="m 713.5098,668.1875 -0.086,0.0859 -395.10355,0 0,94.77929 395.15235,0 0,-0.0117 0.037,0.0371 47.4472,-47.44531 -47.4472,-47.44531 z"
       id="path7357"
       inkscape:connector-curvature="0" />
    <g
       id="g7372"
       transform="translate(30,0)">
      <path
         id="rect7300"
         d="m 283.50977,668.18555 -47.44532,47.44726 47.44532,47.44531 0.0254,-0.0254 346.22461,0 0,-94.77929 -346.16211,0 -0.0879,-0.0879 z"
         style="opacity:1;fill:#00cab3;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         inkscape:connector-curvature="0" />
      <g
         id="text7314"
         style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:125%;font-family:'Sitka Text';-inkscape-font-specification:'Sitka Text';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1">
        <path
           id="path7339"
           style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:125px;font-family:'Sitka Text';-inkscape-font-specification:'Sitka Text'"
           d="m 294.98245,699.38272 0,-1.44445 14.33333,0 0,1.44445 -4.44444,33.94444 -5.38889,0 -4.5,-33.94444 z m -25.27778,0 0,-1.44445 14.38889,0 0,1.44445 -4.5,33.94444 -5.38889,0 -4.5,-33.94444 z"
           inkscape:connector-curvature="0" />
      </g>
    </g>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:45px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="373.73648"
       y="728.04724"
       id="text7323"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan7325"
         x="373.73648"
         y="728.04724">- lipsum.com</tspan></text>
  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:label="Big Concept"
     id="layer6"
     inkscape:groupmode="layer">
    <rect
       ry="0"
       style="display:inline;opacity:1;fill:#004c52;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="rect5925-3"
       width="1024"
       height="768"
       x="0"
       y="-1.1368684e-013" />
    <path
       style="display:inline;opacity:0.85;fill:#009e91;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,737.15668 141.75509,768 1024,714.87097 1026,529.31994 786.49335,521.50915 0,569.40158 Z"
       id="path5927-1"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       style="display:inline;opacity:0.85;fill:#00cab3;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="M 0,731.07505 887.17156,756.80232 1024,721.15668 1024,553.31995 46.550188,530.89708 0,543.4424 Z"
       id="path5929-0"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccc" />
    <path
       inkscape:connector-curvature="0"
       id="path5037-0"
       d="M 0,652.75365 1024,671.4609 1024,563.27965 0,550.11087 Z"
       style="display:inline;opacity:0.85;fill:#8bd74f;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       sodipodi:nodetypes="ccccc" />
    <image
       sodipodi:absref="C:\data\projects\jessyink-templates\Plasma.jpg"
       xlink:href="Plasma.jpg"
       y="40.658817"
       x="39.755322"
       id="image4403"
       style="image-rendering:optimizeQuality"
       preserveAspectRatio="none"
       height="470.73883"
       width="949.60938" />
    <text
       sodipodi:linespacing="125%"
       id="text4278"
       y="635.02527"
       x="243.34753"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:90px"
         y="635.02527"
         x="243.34753"
         id="tspan4280"
         sodipodi:role="line">Big concept</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text4282"
       y="712.56458"
       x="127.16377"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         id="tspan4286"
         y="712.56458"
         x="127.16377"
         sodipodi:role="line">Similar to Headline, but with an image</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text4343-2"
       y="505.94843"
       x="598.9032"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;display:inline;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:22.5px"
         y="505.94843"
         x="598.9032"
         id="tspan4345-9"
         sodipodi:role="line">(c) Copyright Simon Lammer 2016</tspan></text>
  </g>
  <g
     style="display:none"
     inkscape:label="Split content (2)"
     id="layer7"
     inkscape:groupmode="layer"
     sodipodi:insensitive="true">
    <text
       sodipodi:linespacing="125%"
       id="text7144"
       y="280.78027"
       x="114.90279"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:70px"
         y="280.78027"
         x="114.90279"
         id="tspan7146"
         sodipodi:role="line">Title A</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="632.90277"
       y="280.78027"
       id="text7168"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan7170"
         x="632.90277"
         y="280.78027"
         style="font-size:70px">Title B</tspan></text>
    <g
       id="g8279">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="166.71637"
         y="357.59253"
         id="text7148"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan7150"
           x="166.71637"
           y="357.59253"
           style="font-size:60px">Item 1</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path5575-1"
         sodipodi:sides="4"
         sodipodi:cx="-132.70497"
         sodipodi:cy="-336.14722"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -132.70497,-326.90808 -9.23914,-9.23914 9.23914,-9.23914 9.23914,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g8265">
      <text
         sodipodi:linespacing="125%"
         id="text7156"
         y="446.92587"
         x="166.71637"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="446.92587"
           x="166.71637"
           id="tspan7158"
           sodipodi:role="line">Item 2</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -132.70497,-415.84591 -9.23914,-9.23914 9.23914,-9.23914 9.23914,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-425.08505"
         sodipodi:cx="-132.70497"
         sodipodi:sides="4"
         id="path8256"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g8260">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="166.71637"
         y="536.25922"
         id="text7160"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan7162"
           x="166.71637"
           y="536.25922"
           style="font-size:60px">Item 3</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -132.70497,-505.17926 -9.23914,-9.23914 9.23914,-9.23913 9.23914,9.23913 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-514.4184"
         sodipodi:cx="-132.70497"
         sodipodi:sides="4"
         id="path8258"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g8272">
      <text
         sodipodi:linespacing="125%"
         id="text7164"
         y="625.59253"
         x="166.71637"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="625.59253"
           x="166.71637"
           id="tspan7166"
           sodipodi:role="line">Item 4</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -132.70497,-594.90808 -9.23914,-9.23914 9.23914,-9.23914 9.23914,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-604.14722"
         sodipodi:cx="-132.70497"
         sodipodi:sides="4"
         id="path8270"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g8310">
      <text
         sodipodi:linespacing="125%"
         id="text7172"
         y="357.59253"
         x="684.71637"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="357.59253"
           x="684.71637"
           id="tspan7174"
           sodipodi:role="line">Item 1</tspan></text>
      <path
         transform="scale(-1,-1)"
         d="m -650.70496,-326.90808 -9.23913,-9.23914 9.23913,-9.23914 9.23914,9.23914 z"
         inkscape:randomized="0"
         inkscape:rounded="0"
         inkscape:flatsided="true"
         sodipodi:arg2="2.3561945"
         sodipodi:arg1="1.5707963"
         sodipodi:r2="12.929953"
         sodipodi:r1="9.2391386"
         sodipodi:cy="-336.14722"
         sodipodi:cx="-650.70496"
         sodipodi:sides="4"
         id="path8277"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         sodipodi:type="star" />
    </g>
    <g
       id="g8286">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="684.71637"
         y="446.92587"
         id="text7176"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan7178"
           x="684.71637"
           y="446.92587"
           style="font-size:60px">Item 2</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path8284"
         sodipodi:sides="4"
         sodipodi:cx="-650.70496"
         sodipodi:cy="-425.08505"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -650.70496,-415.84591 -9.23913,-9.23914 9.23913,-9.23914 9.23914,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g8293">
      <text
         sodipodi:linespacing="125%"
         id="text7180"
         y="536.25922"
         x="684.71637"
         style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         xml:space="preserve"><tspan
           style="font-size:60px"
           y="536.25922"
           x="684.71637"
           id="tspan7182"
           sodipodi:role="line">Item 3</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path8291"
         sodipodi:sides="4"
         sodipodi:cx="-650.70496"
         sodipodi:cy="-514.4184"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -650.70496,-505.17926 -9.23913,-9.23914 9.23913,-9.23913 9.23914,9.23913 z"
         transform="scale(-1,-1)" />
    </g>
    <g
       id="g8300">
      <text
         xml:space="preserve"
         style="font-style:normal;font-weight:normal;font-size:40px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
         x="684.71637"
         y="625.59253"
         id="text7184"
         sodipodi:linespacing="125%"><tspan
           sodipodi:role="line"
           id="tspan7186"
           x="684.71637"
           y="625.59253"
           style="font-size:60px">Item 4</tspan></text>
      <path
         sodipodi:type="star"
         style="opacity:0.85;fill:none;fill-opacity:1;stroke:#8bd74f;stroke-width:12.39999962;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
         id="path8298"
         sodipodi:sides="4"
         sodipodi:cx="-650.70496"
         sodipodi:cy="-604.14722"
         sodipodi:r1="9.2391386"
         sodipodi:r2="12.929953"
         sodipodi:arg1="1.5707963"
         sodipodi:arg2="2.3561945"
         inkscape:flatsided="true"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -650.70496,-594.90808 -9.23913,-9.23914 9.23913,-9.23914 9.23914,9.23914 z"
         transform="scale(-1,-1)" />
    </g>
  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:label="Small image"
     id="layer8"
     inkscape:groupmode="layer">
    <image
       sodipodi:absref="C:\data\projects\jessyink-templates\Plasma.jpg"
       xlink:href="Plasma.jpg"
       y="159.92471"
       x="538.50354"
       id="image4416"
       style="image-rendering:optimizeQuality"
       preserveAspectRatio="none"
       height="450.86118"
       width="450.86124" />
    <text
       sodipodi:linespacing="125%"
       id="text7200"
       y="326.22104"
       x="98.173103"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         y="326.22104"
         x="98.173103"
         id="tspan7202"
         sodipodi:role="line" /></text>
    <flowRoot
       transform="translate(0,44)"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       id="flowRoot7204"
       xml:space="preserve"><flowRegion
         id="flowRegion7206"><rect
           y="222.59387"
           x="64.08522"
           height="317.6991"
           width="447.91479"
           id="rect7208" /></flowRegion><flowPara
         id="flowPara7210">This is a short description of the image</flowPara></flowRoot>    <text
       sodipodi:linespacing="125%"
       id="text4343-7"
       y="605.64252"
       x="598.19263"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;display:inline;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:22.5px"
         y="605.64252"
         x="598.19263"
         id="tspan4345-7"
         sodipodi:role="line">(c) Copyright Simon Lammer 2016</tspan></text>
  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:label="Big Image"
     id="layer9"
     inkscape:groupmode="layer">
    <rect
       y="-1.1368684e-013"
       x="0"
       height="768"
       width="1024"
       id="rect4329"
       style="opacity:1;fill:#004c52;fill-opacity:1;stroke:none;stroke-width:2;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <image
       sodipodi:absref="C:\data\projects\jessyink-templates\Plasma.jpg"
       xlink:href="Plasma.jpg"
       y="-7.9641582e-014"
       x="1.4210855e-013"
       id="image4427"
       style="image-rendering:optimizeQuality"
       preserveAspectRatio="none"
       height="768"
       width="1024" />
    <text
       sodipodi:linespacing="125%"
       id="text4343"
       y="760.82355"
       x="631.35059"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:22.5px"
         y="760.82355"
         x="631.35059"
         id="tspan4345"
         sodipodi:role="line">(c) Copyright Simon Lammer 2016</tspan></text>
  </g>
  <g
     style="display:none"
     inkscape:label="Important Word"
     id="layer10"
     inkscape:groupmode="layer"
     sodipodi:insensitive="true">
    <text
       sodipodi:linespacing="125%"
       id="text7225"
       y="350.95074"
       x="96.077217"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:125px;fill:#8bd74f;fill-opacity:1"
         y="350.95074"
         x="96.077217"
         id="tspan7227"
         sodipodi:role="line">3.141592653</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text7229"
       y="440.75632"
       x="107.71771"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         y="440.75632"
         x="107.71771"
         id="tspan7231"
         sodipodi:role="line" /></text>
    <flowRoot
       transform="translate(-18,20)"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;text-align:center;letter-spacing:0px;word-spacing:0px;text-anchor:middle;fill:#009e91;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       id="flowRoot7233"
       xml:space="preserve"><flowRegion
         id="flowRegion7235"><rect
           style="text-align:center;text-anchor:middle;fill:#009e91;fill-opacity:1"
           y="384"
           x="107.71771"
           height="272.19174"
           width="844.01593"
           id="rect7237" /></flowRegion><flowPara
         style="font-size:50px;fill:#009e91;fill-opacity:1"
         id="flowPara7239">The ratio of a circle's circumference to its diameter</flowPara></flowRoot>  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:label="Thanks"
     id="layer11"
     inkscape:groupmode="layer">
    <text
       sodipodi:linespacing="125%"
       id="text7242"
       y="409.03064"
       x="282.8735"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:90px"
         y="409.03064"
         x="282.8735"
         id="tspan7244"
         sodipodi:role="line">Thank you</tspan></text>
  </g>
  <g
     sodipodi:insensitive="true"
     style="display:none"
     inkscape:groupmode="layer"
     id="layer12"
     inkscape:label="Credits">
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="58.08522"
       y="211.59521"
       id="text4319"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan4321"
         x="58.08522"
         y="211.59521"
         style="font-size:40px">http://www.example.com/some/directory/4.html</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text4323"
       y="294.79523"
       x="58.08522"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:40px"
         y="294.79523"
         x="58.08522"
         id="tspan4325"
         sodipodi:role="line">http://www.example.com/fads/jkl/2.html</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="58.08522"
       y="377.99521"
       id="text4327"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan4329"
         x="58.08522"
         y="377.99521"
         style="font-size:40px">http://www.example.com/fdsa/lkj/7.html</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text4331"
       y="461.19522"
       x="58.08522"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:40px"
         y="461.19522"
         x="58.08522"
         id="tspan4333"
         sodipodi:role="line">http://www.example.com/afsd/kjl/6.html</tspan></text>
    <text
       xml:space="preserve"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       x="58.08522"
       y="544.3952"
       id="text4335"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         id="tspan4337"
         x="58.08522"
         y="544.3952"
         style="font-size:40px">http://www.example.com/fdas/klj/9.html</tspan></text>
    <text
       sodipodi:linespacing="125%"
       id="text4339"
       y="627.59521"
       x="58.08522"
       style="font-style:normal;font-weight:normal;font-size:60px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       xml:space="preserve"><tspan
         style="font-size:40px"
         y="627.59521"
         x="58.08522"
         id="tspan4341"
         sodipodi:role="line">http://www.example.com/asdf/lkj/31.html</tspan></text>
  </g>
  <text
     xml:space="preserve"
     style="font-style:normal;font-weight:normal;font-size:45px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;"
     x="43.632488"
     y="93.059921"
     id="text4228"
     sodipodi:linespacing="125%"><tspan
       sodipodi:role="line"
       id="tspan4230"
       x="43.632488"
       y="93.059921" /></text>
  <text
     xml:space="preserve"
     style="font-style:normal;font-weight:normal;font-size:45px;line-height:125%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;"
     x="42.268974"
     y="147.60052"
     id="text4232"
     sodipodi:linespacing="125%"><tspan
       sodipodi:role="line"
       id="tspan4234"
       x="42.268974"
       y="147.60052" /></text>
  <script
     ns1:version="1.5.5"
     id="JessyInk">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
	// Make sure we only execute this code once. Double execution can occur if the onload event handler is set
	// in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
	// not lead to any problems, but it takes more time.
	if (jessyInkInitialised)
		return;

	// Making the presentation scaleable.
	var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

	if (VIEWBOX)
	{
		WIDTH = ROOT_NODE.viewBox.animVal.width;
		HEIGHT = ROOT_NODE.viewBox.animVal.height;
	}
	else
	{
		HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
		WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
		ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
	}

	ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
	ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

	// Setting the background color.
	var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

	for (var counter = 0; counter &lt; namedViews.length; counter++)
	{
		if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
		{
			if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
			{
				BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
				var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

				if (ROOT_NODE.hasAttribute(&quot;style&quot;))
					newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

				ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
			}
		}
	}

	// Defining clip-path.
	var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

	if (defsNodes.length &gt; 0)
	{
		var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

		if (!existingClipPath)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
			var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);

			clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
			clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

			clipPath.appendChild(rectNode);
			defsNodes[0].appendChild(clipPath);
		}
	}

	// Making a list of the slide and finding the master slide.
	var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	var tempSlides = new Array();
	var existingJessyInkPresentationLayer = null;

	for (var counter = 0; counter &lt; nodes.length; counter++)
	{
		if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
		{
			if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
				masterSlide = nodes[counter];
			else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
				existingJessyInkPresentationLayer = nodes[counter];
			else
				tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
		}
		else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
		{
			handleElement(nodes[counter]);
		}
	}

	// Hide master slide set default transitions.
	if (masterSlide)
	{
		masterSlide.style.display = &quot;none&quot;;

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
	}

	if (existingJessyInkPresentationLayer != null)
	{
		existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
	}

	// Set start slide.
	var hashObj = new LocationHash(window.location.hash);

	activeSlide = hashObj.slideNumber;
	activeEffect = hashObj.effectNumber;

	if (activeSlide &lt; 0)
		activeSlide = 0;
	else if (activeSlide &gt;= tempSlides.length)
		activeSlide = tempSlides.length - 1;

	var originalNode = document.getElementById(tempSlides[counter]);

	var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
	JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
	JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
	ROOT_NODE.appendChild(JessyInkPresentationLayer);

	// Gathering all the information about the transitions and effects of the slides, set the background
	// from the master slide and substitute the auto-texts.
	for (var counter = 0; counter &lt; tempSlides.length; counter++)
	{
		var originalNode = document.getElementById(tempSlides[counter]);
		originalNode.style.display = &quot;none&quot;;
		var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
		JessyInkPresentationLayer.appendChild(node);
		slides[counter] = new Object();
		slides[counter][&quot;original_element&quot;] = originalNode;
		slides[counter][&quot;element&quot;] = node;

		// Set build in transition.
		slides[counter][&quot;transitionIn&quot;] = new Object();

		var dict;

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
		else
			dict = defaultTransitionInDict;

		slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

		// Set build out transition.
		slides[counter][&quot;transitionOut&quot;] = new Object();

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
		else
			dict = defaultTransitionOutDict;

		slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

		// Copy master slide content.
		if (masterSlide)
		{
			var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
			clonedNode.style.display = &quot;inherit&quot;;

			node.insertBefore(clonedNode, node.firstChild);
		}

		// Setting clip path.
		node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

		// Substitute auto texts.
		substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

		// Set effects.
		var tempEffects = new Array();
		var groups = new Object();

		for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
		{
			var propName = &quot;&quot;;
			var dir = 0;

			if (IOCounter == 0)
			{
				propName = &quot;effectIn&quot;;
				dir = 1;
			}
			else if (IOCounter == 1)
			{
				propName = &quot;effectOut&quot;;
				dir = -1;
			}

			var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

			for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
			{
				var element = document.getElementById(effects[effectCounter]);
				var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

				// Put every element that has an effect associated with it, into its own group.
				// Unless of course, we already put it into its own group.
				if (!(groups[element.id]))
				{
					var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

					element.parentNode.insertBefore(newGroup, element);
					newGroup.appendChild(element.parentNode.removeChild(element));
					groups[element.id] = newGroup;
				}

				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = dir;
				effectDict[&quot;element&quot;] = groups[element.id];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				if (!tempEffects[dict[&quot;order&quot;]])
					tempEffects[dict[&quot;order&quot;]] = new Array();

				tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
			}
		}

		// Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
		node.setAttribute(&quot;opacity&quot;,0);
		node.style.display = &quot;inherit&quot;;

		// Create a transform group.
		var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		// Add content to transform group.
		while (node.firstChild)
			transformGroup.appendChild(node.firstChild);

		// Transfer the transform attribute from the node to the transform group.
		if (node.getAttribute(&quot;transform&quot;))
		{
			transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
			node.removeAttribute(&quot;transform&quot;);
		}

		// Create a view group.
		var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		viewGroup.appendChild(transformGroup);
		slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

		// Insert background.
		if (BACKGROUND_COLOR != null)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);
			rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
			rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

			slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
		}

		// Set views.
		var tempViews = new Array();
		var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
		var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

		// Set initial view even if there are no other views.
		slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
		slides[counter].initialView = matrixOld.toAttribute();

		for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
		{
			var element = document.getElementById(views[viewCounter]);
			var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

			if (dict[&quot;order&quot;] == 0)
			{
				matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
				slides[counter].initialView = matrixOld.toAttribute();
			}
			else
			{
				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = 1;
				effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
				effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

				tempViews[dict[&quot;order&quot;]] = effectDict;
			}

			// Remove element.
			element.parentNode.removeChild(element);
		}

		// Consolidate view array and append it to the effect array.
		if (tempViews.length &gt; 0)
		{
			for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
			{
				if (tempViews[viewCounter])
				{
					tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
					matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

					if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
						tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

					tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
				}
			}
		}

		// Set consolidated effect array.
		if (tempEffects.length &gt; 0)
		{
			slides[counter][&quot;effects&quot;] = new Array();

			for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
			{
				if (tempEffects[effectCounter])
					slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
			}
		}

		node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

		// Set visibility for initial state.
		if (counter == activeSlide)
		{
			node.style.display = &quot;inherit&quot;;
			node.setAttribute(&quot;opacity&quot;,1);
		}
		else
		{
			node.style.display = &quot;none&quot;;
			node.setAttribute(&quot;opacity&quot;,0);
		}
	}

	// Set key handler.
	var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
	{
		var elem = jessyInkObjects[counter];

		if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
		{
			if (elem.getCustomKeyBindings != undefined)
				keyCodeDictionary = elem.getCustomKeyBindings();

			if (elem.getCustomCharBindings != undefined)
				charCodeDictionary = elem.getCustomCharBindings();
		}
	}

	// Set mouse handler.
	var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

	for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
	{
		var elem = jessyInkMouseHandler[counter];

		if (elem.getMouseHandler != undefined)
		{
			var tempDict = elem.getMouseHandler();

			for (mode in tempDict)
			{
				if (!mouseHandlerDictionary[mode])
					mouseHandlerDictionary[mode] = new Object();

				for (handler in tempDict[mode])
					mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
			}
		}
	}

	// Check effect number.
	if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
	{
		activeEffect = 0;
	}
	else if (activeEffect &gt; slides[activeSlide].effects.length)
	{
		activeEffect = slides[activeSlide].effects.length;
	}

	createProgressBar(JessyInkPresentationLayer);
	hideProgressBar();
	setProgressBarValue(activeSlide);
	setTimeIndicatorValue(0);
	setInterval(&quot;updateTimer()&quot;, 1000);
	setSlideToState(activeSlide, activeEffect);
	jessyInkInitialised = true;
}

/** Function to subtitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
	var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

	for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
	{
		if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
			texts[textCounter].firstChild.nodeValue = slideNumber;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
			texts[textCounter].firstChild.nodeValue = numberOfSlides;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
			texts[textCounter].firstChild.nodeValue = slideName;
	}
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *	This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
	var elems = new Array();

	if (node.getAttributeNS(namespace, name))
		elems.push(node.getAttribute(&quot;id&quot;));

	for (var counter = 0; counter &lt; node.childNodes.length; counter++)
	{
		if (node.childNodes[counter].nodeType == 1)
			elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
	}

	return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (dir == 1)
		{
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
			activeEffect += dir;
		}
		else if (dir == -1)
		{
			activeEffect += dir;
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
		}

		transCounter = 0;
		startTime = (new Date()).getTime();
		lastFrameTime = null;
		effect(dir);
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
			activeEffect = slides[activeSlide][&quot;effects&quot;].length;
		else
			activeEffect = 0;

		if (dir == 1)
			setSlideToState(activeSlide, STATE_END);
		else
			setSlideToState(activeSlide, STATE_START);

		processingEffect = false;
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
	processingEffect = true;
	effectArray = new Array();

	effectArray[0] = new Object();
	if (dir == 1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = -1;
	}
	else if (dir == -1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = 1;
	}
	effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	activeSlide += dir;
	setProgressBarValue(activeSlide);

	effectArray[1] = new Object();

	if (dir == 1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = 1;
	}
	else if (dir == -1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = -1;
	}

	effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
		activeEffect = slides[activeSlide][&quot;effects&quot;].length;
	else
		activeEffect = 0;

	if (dir == -1)
		setSlideToState(activeSlide, STATE_END);
	else
		setSlideToState(activeSlide, STATE_START);

	transCounter = 0;
	startTime = (new Date()).getTime();
	lastFrameTime = null;
	effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
	var suspendHandle = ROOT_NODE.suspendRedraw(500);

	if (currentMode == SLIDE_MODE)
	{
		hideProgressBar();		
		INDEX_OFFSET = -1;
		indexSetPageSlide(activeSlide);
		currentMode = INDEX_MODE;
	}
	else if (currentMode == INDEX_MODE)
	{
		for (var counter = 0; counter &lt; slides.length; counter++)
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

			if (counter == activeSlide)
			{
				slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
				activeEffect = 0;
			}
			else
			{
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
				slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
			}
		}
		currentMode = SLIDE_MODE;
		setSlideToState(activeSlide, STATE_START);
		setProgressBarValue(activeSlide);

		if (progress_bar_visible)
		{
			showProgressBar();
		}
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
	var done = true;

	var suspendHandle = ROOT_NODE.suspendRedraw(200);

	for (var counter = 0; counter &lt; effectArray.length; counter++)
	{
		if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
			done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
			done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
			done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
			done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();

	if (!done)
	{
		var currentTime = (new Date()).getTime();
		var timeDiff = 1;

		transCounter = currentTime - startTime;

		if (lastFrameTime != null)
		{
			timeDiff = timeStep - (currentTime - lastFrameTime);

			if (timeDiff &lt;= 0)
				timeDiff = 1;
		}

		lastFrameTime = currentTime;

		window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
	}
	else
	{
		window.location.hash = (activeSlide + 1) + '_' + activeEffect;
		processingEffect = false;
	}
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
	var offsetX = 0;
	var offsetY = 0;

	if (offsetNumber &lt; 0)
		offsetNumber = 0;
	else if (offsetNumber &gt;= slides.length)
		offsetNumber = slides.length - 1;

	for (var counter = 0; counter &lt; slides.length; counter++)
	{
		if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
			slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
		}
		else
		{
			offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
			offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
			slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
		}

		setSlideToState(counter, STATE_END);
	}

	//do we need to save the current offset?
	if (INDEX_OFFSET != offsetNumber)
		INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

	activeSlide = parseInt(nbr);

	setSlideToState(activeSlide, STATE_START);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

	activeEffect = 0;
	setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

	activeSlide = parseInt(nbr);
	window.location.hash = (activeSlide + 1) + '_0';

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view. 
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	//calculate the offset
	var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

	if (offset &lt; 0)
		offset = 0;

	//if different from kept offset, then record and change the page
	if (offset != INDEX_OFFSET)
	{
		INDEX_OFFSET = offset;
		displayIndex(INDEX_OFFSET);
	}

	//set the active slide
	indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
	if (!e)
		e = window.event;

	code = e.keyCode || e.charCode;

	if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
		return keyCodeDictionary[currentMode][code]();
	else
		document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
	document.onkeypress = null;

	if (!e)
		e = window.event;

	str = String.fromCharCode(e.keyCode || e.charCode);

	if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
		return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
	var charCodeDict = new Object();

	charCodeDict[SLIDE_MODE] = new Object();
	charCodeDict[INDEX_MODE] = new Object();
	charCodeDict[DRAWING_MODE] = new Object();

	charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
	charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
	charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
	charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
	charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
	charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

	charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
	charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
	charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
	charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
	charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
	charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
	charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
	charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
	charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
	charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
	charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
	charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
	charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
	charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
	charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
	charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
	charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

	charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

	return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
	var keyCodeDict = new Object();

	keyCodeDict[SLIDE_MODE] = new Object();
	keyCodeDict[INDEX_MODE] = new Object();
	keyCodeDict[DRAWING_MODE] = new Object();

	keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
	keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
	keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
	keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
	keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

	keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
	keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
	keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
	keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
	keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

	keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

	return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *	@param	evnt	event
 *	@param	action	type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
	if (!evnt)
		evnt = window.event;

	var retVal = true;

	if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
	{
		var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

		if (subRetVal != null &amp;&amp; subRetVal != undefined)
			retVal = subRetVal;
	}

	if (evnt.preventDefault &amp;&amp; !retVal)
		evnt.preventDefault();

	evnt.returnValue = retVal;

	return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
	window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
	var mouseHandlerDict = new Object();

	mouseHandlerDict[SLIDE_MODE] = new Object();
	mouseHandlerDict[INDEX_MODE] = new Object();
	mouseHandlerDict[DRAWING_MODE] = new Object();

	mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
	mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

	mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

	mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

	return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
	currentMode = DRAWING_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
	currentMode = SLIDE_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &gt;= 3)
	{
		INDEX_COLUMNS -= 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &lt; 7)
	{
		INDEX_COLUMNS += 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
	if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
	{
		INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
	path_width = path_width_default;
	set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
	path_width = width;
	set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
	path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
	var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

	if ((new_duration != null) &amp;&amp; (new_duration != ''))
	{
		timer_duration = new_duration;
	}

	updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
	addSlide(afterSlide);
	slideSetActiveSlide(afterSlide + 1);
	updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
	if (progress_bar_visible)
	{
		progress_bar_visible = false;
		hideProgressBar();
	}
	else
	{
		progress_bar_visible = true;
		showProgressBar();
	}
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
	timer_start = timer_elapsed;
	updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
	var outStr = str;

	while (outStr.length &lt; len)
	{
		outStr = '0' + outStr;
	}

	return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
	// Suspend redraw since we are going to mess with the slides.
	var suspendHandle = ROOT_NODE.suspendRedraw(2000);

	var tmpActiveSlide = activeSlide;
	var tmpActiveEffect = activeEffect;
	var exportedLayers = new Array();

	for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
	{
		var exportNode;

		setSlideToState(counterSlides, STATE_START);

		var maxEffect = 0;

		if (slides[counterSlides].effects)
		{
			maxEffect = slides[counterSlides].effects.length;
		}

		exportNode = slides[counterSlides].element.cloneNode(true);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

		exportedLayers.push(exportNode);

		if (slides[counterSlides][&quot;effects&quot;])
		{	
			for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}

				var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
				exportNode = slides[counterSlides].element.cloneNode(true);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
				exportNode.setAttribute(&quot;id&quot;, layerName);

				exportedLayers.push(exportNode);
			}
		}
	}

	activeSlide = tmpActiveSlide;
	activeEffect = tmpActiveEffect;
	setSlideToState(activeSlide, activeEffect);

	// Copy image.
	var newDoc = document.documentElement.cloneNode(true);

	// Delete viewbox form new imag and set width and height.
	newDoc.removeAttribute('viewbox');
	newDoc.setAttribute('width', WIDTH);
	newDoc.setAttribute('height', HEIGHT);

	// Delete all layers and script elements.
	var nodesToBeRemoved = new Array();

	for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
	{
		var child = newDoc.childNodes[childCounter];

		if (child.nodeType == 1)
		{
			if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
			{
				nodesToBeRemoved.push(child);
			}
		}
	}

	for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
	{
		var nd = nodesToBeRemoved[ndCounter];

		// Before removing the node, check whether it contains any definitions.
		var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

		for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
		{
			if (defs[defsCounter].id)
			{
				newDoc.appendChild(defs[defsCounter].cloneNode(true));
			}
		}

		// Remove node.
		nd.parentNode.removeChild(nd);
	}

	// Set current layer.
	if (exportedLayers[0])
	{
		var namedView;

		for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
		{
			if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
			{
				namedView = newDoc.childNodes[nodeCounter];
			}
		}

		if (namedView)
		{
			namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
		}
	}

	// Add exported layers.
	while (exportedLayers.length &gt; 0)
	{
		var nd = exportedLayers.pop();

		nd.setAttribute(&quot;opacity&quot;,1);
		nd.style.display = &quot;inherit&quot;;

		newDoc.appendChild(nd);
	}

	// Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

	// Unsuspend redraw.
	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
	mouse_presentation_path = null;
	mouse_original_path = null;

	if (history_presentation_elements.length &gt; 0)
	{
		var p = history_presentation_elements.pop();
		var parent = p.parentNode.removeChild(p);

		p = history_original_elements.pop();
		parent = p.parentNode.removeChild(p);
	}
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
	var value = 0;

	if (e.button)
		value = e.button;
	else if (e.which)
		value = e.which;

	if (value == 1)
	{
		history_counter++;

		var p = calcCoord(e);

		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
		mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
		mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
		slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
		history_original_elements.push(mouse_original_path);

		mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
		mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

		if (slides[activeSlide][&quot;viewGroup&quot;])
			slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
		else
			slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

		history_presentation_elements.push(mouse_presentation_path);

		return false;
	}

	return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
	if(!e)
		e = window.event;

	if (mouse_presentation_path != null)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_presentation_path = null;
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path = null;

		return false;
	}

	return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
	if(!e)
		e = window.event;

	var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

	if (mouse_presentation_path == null)
	{
		return true;
	}

	if (dist &gt;= mouse_min_dist_sqr)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
	}

	return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		skipEffects(-1);
	else if (delta &lt; 0)
		skipEffects(1);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
	else if (delta &lt; 0)
		indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
	var svgPoint1 = document.documentElement.createSVGPoint();
	var svgPoint2 = document.documentElement.createSVGPoint();

	svgPoint1.x = 0.0;
	svgPoint1.y = 0.0;
	svgPoint2.x = 1.0;
	svgPoint2.y = 0.0;

	var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

	svgPoint1 = svgPoint1.matrixTransform(matrix);
	svgPoint2 = svgPoint2.matrixTransform(matrix);

	path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if (!options[&quot;matrixInitial&quot;])
	{
		var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

		if (tempString)
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
		else
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
	}

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
		}
	}

	return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;none&quot;;
			element.setAttribute(&quot;opacity&quot;, 0);
		}
		else if (fraction &gt;= 1)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, fraction);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
		}
	}
	return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
	if (dir == 1)
	{
		element.style.display = &quot;inherit&quot;;
		element.setAttribute(&quot;opacity&quot;,1);
	}
	else if (dir == -1)
	{
		element.style.display = &quot;none&quot;;
		element.setAttribute(&quot;opacity&quot;,0);
	}
	return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
	var length = 500;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
			element.style.display = &quot;none&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;inherit&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			var opacityFraction = fraction * 3;
			if (opacityFraction &gt; 1)
				opacityFraction = 1;
			element.setAttribute(&quot;opacity&quot;, opacityFraction);
			var offsetX = WIDTH * (1.0 - fraction) / 2.0;
			var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
			element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
			element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
	}
	return false;
}

/** Function to set a slide either to the start or the end state.
 *  
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
	slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

	if (slides[slide][&quot;effects&quot;])
	{	
		if (state == STATE_END)
		{
			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
		else if (state == STATE_START)
		{
			for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
				}
			}
		}
		else
		{
			setSlideToState(slide, STATE_START);

			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
	}

	window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *	@param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
	var list = str.split(&quot;;&quot;);
	var obj = new Object();

	for (var counter = 0; counter &lt; list.length; counter++)
	{
		var subStr = list[counter];
		var subList = subStr.split(&quot;:&quot;);
		if (subList.length == 2)
		{
			obj[subList[0]] = subList[1];
		}	
	}

	return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
	var str = &quot;&quot;;

	for (var key in dict)
	{
		str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
	}

	return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *	@param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
	if (node.nodeType == 1)
	{
		if (node.getAttribute(&quot;id&quot;))
		{
			var id = node.getAttribute(&quot;id&quot;)
				replace[&quot;#&quot; + id] = id + suffix;
			node.setAttribute(&quot;id&quot;, id + suffix);
		}

		if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
			node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

		if (node.childNodes)
		{
			for (var counter = 0; counter &lt; node.childNodes.length; counter++)
				suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
		}
	}
}

/** Function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
	var replace = new Object();

	suffixNoneIds_sub(node, suffix, replace);

	return node;
}

/** Function to build a progress bar.
 *	
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
	rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
	rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
	rect_progress_bar.setAttribute(&quot;x&quot;, 0);
	rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
	rect_progress_bar.setAttribute(&quot;width&quot;, 0);
	rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
	g.appendChild(rect_progress_bar);

	var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
	circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
	circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
	circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
	g.appendChild(circle_timer_indicator);

	parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *	
 */
function hideProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *	
 */
function showProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *	
 *	@param value the current slide number
 *
 */
function setProgressBarValue(value)
{
	var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

	if (!rect_progress_bar)
	{
		return;
	}

	if (value &lt; 1)
	{
		// First slide, assumed to be the title of the presentation
		var x = 0;
		var w = 0.01 * HEIGHT;
	}
	else if (value &gt;= slides.length - 1)
	{
		// Last slide, assumed to be the end of the presentation
		var x = WIDTH - 0.01 * HEIGHT;
		var w = 0.01 * HEIGHT;
	}
	else
	{
		value -= 1;
		value /= (slides.length - 2);

		var x = WIDTH * value;
		var w = WIDTH / (slides.length - 2);
	}

	rect_progress_bar.setAttribute(&quot;x&quot;, x);
	rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *	
 *	@param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
	var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

	if (!circle_timer_indicator)
	{
		return;
	}

	if (value &lt; 0.0)
	{
		value = 0.0;
	}

	if (value &gt; 1.0)
	{
		value = 1.0;
	}

	var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
	circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *	
 */
function updateTimer()
{
	timer_elapsed += 1;
	setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system	
 */
function calcCoord(e)
{
	var svgPoint = document.documentElement.createSVGPoint();
	svgPoint.x = e.clientX + window.pageXOffset;
	svgPoint.y = e.clientY + window.pageYOffset;

	var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

	svgPoint = svgPoint.matrixTransform(matrix.inverse());
	return svgPoint;
}

/** Add slide.
 *
 *	@param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
	number_of_added_slides++;

	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var new_slide = new Object();
	new_slide[&quot;element&quot;] = g;

	// Set build in transition.
	new_slide[&quot;transitionIn&quot;] = new Object();
	var dict = defaultTransitionInDict;
	new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

	// Set build out transition.
	new_slide[&quot;transitionOut&quot;] = new Object();
	dict = defaultTransitionOutDict;
	new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

	// Copy master slide content.
	if (masterSlide)
	{
		var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
		clonedNode.style.display = &quot;inherit&quot;;

		g.appendChild(clonedNode);
	}

	// Substitute auto texts.
	substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

	g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

	// Create a transform group.
	var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	// Add content to transform group.
	while (g.firstChild)
		transformGroup.appendChild(g.firstChild);

	// Transfer the transform attribute from the node to the transform group.
	if (g.getAttribute(&quot;transform&quot;))
	{
		transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
		g.removeAttribute(&quot;transform&quot;);
	}

	// Create a view group.
	var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	viewGroup.appendChild(transformGroup);
	new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

	// Insert background.
	if (BACKGROUND_COLOR != null)
	{
		var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

		rectNode.setAttribute(&quot;x&quot;, 0);
		rectNode.setAttribute(&quot;y&quot;, 0);
		rectNode.setAttribute(&quot;width&quot;, WIDTH);
		rectNode.setAttribute(&quot;height&quot;, HEIGHT);
		rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
		rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

		new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
	}

	// Set initial view even if there are no other views.
	var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

	new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
	new_slide.initialView = matrixOld.toAttribute();

	// Insert slide
	var node = slides[after_slide][&quot;element&quot;];
	var next_node = node.nextSibling;
	var parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	new_slide[&quot;original_element&quot;] = g;

	node = slides[after_slide][&quot;original_element&quot;];
	next_node = node.nextSibling;
	parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	before_new_slide = slides.slice(0, after_slide + 1);
	after_new_slide = slides.slice(after_slide + 1);
	slides = before_new_slide.concat(new_slide, after_new_slide);

	//resetting the counter attributes on the slides that follow the new slide...
	for (var counter = after_slide+2; counter &lt; slides.length; counter++)
	{
		slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
	}
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *	@param mPoints Point matrix.
 *	@return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
	mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

	return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *	@param rect an svg rectangle
 *	@return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
	rectWidth = rect.getBBox().width;
	rectHeight = rect.getBBox().height;
	rectX = rect.getBBox().x;
	rectY = rect.getBBox().y;
	rectXcorr = 0;
	rectYcorr = 0;

	scaleX = WIDTH / rectWidth;
	scaleY = HEIGHT / rectHeight;

	if (scaleX &gt; scaleY)
	{
		scaleX = scaleY;
		rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
		rectWidth = WIDTH / scaleX;
	}	
	else
	{
		scaleY = scaleX;
		rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
		rectHeight = HEIGHT / scaleY;
	}

	if (rect.transform.baseVal.numberOfItems &lt; 1)
	{
		mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
	}
	else
	{
		mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
	}

	newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
	newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

	return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *	@param	node	Element node.
 */
function handleElement(node)
{
	if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
	{
		var url;
		var width;
		var height;
		var x;
		var y;
		var transform;

		var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

		for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
		{
			if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
			{
				url = tspans[tspanCounter].firstChild.nodeValue;
			}
		}

		var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

		for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
		{
			if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
			{
				x = rects[rectCounter].getAttribute(&quot;x&quot;);
				y = rects[rectCounter].getAttribute(&quot;y&quot;);
				width = rects[rectCounter].getAttribute(&quot;width&quot;);
				height = rects[rectCounter].getAttribute(&quot;height&quot;);
				transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
			}
		}

		for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
		{
			if (node.childNodes[childCounter].nodeType == 1)
			{
				if (node.childNodes[childCounter].style)
				{
					node.childNodes[childCounter].style.display = 'none';
				}
				else
				{
					node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
				}
			}
		}

		var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
		foreignNode.setAttribute(&quot;x&quot;, x);
		foreignNode.setAttribute(&quot;y&quot;, y);
		foreignNode.setAttribute(&quot;width&quot;, width);
		foreignNode.setAttribute(&quot;height&quot;, height);
		foreignNode.setAttribute(&quot;transform&quot;, transform);

		var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
		videoNode.setAttribute(&quot;src&quot;, url);

		foreignNode.appendChild(videoNode);
		node.appendChild(foreignNode);
	}
}

/** Class processing the location hash.
 *
 *	@param str location hash
 */
function LocationHash(str)
{
	this.slideNumber = 0;
	this.effectNumber = 0;

	str = str.substr(1, str.length - 1);

	var parts = str.split('_');

	// Try to extract slide number.
	if (parts.length &gt;= 1)
	{
		try
		{
			var slideNumber = parseInt(parts[0]);

			if (!isNaN(slideNumber))
			{
				this.slideNumber = slideNumber - 1;
			}
		}
		catch (e)
		{
		}
	}
	
	// Try to extract effect number.
	if (parts.length &gt;= 2)
	{
		try
		{
			var effectNumber = parseInt(parts[1]);

			if (!isNaN(effectNumber))
			{
				this.effectNumber = effectNumber;
			}
		}
		catch (e)
		{
		}
	}
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
	this.e11 = 0; // a
	this.e12 = 0; // c
	this.e13 = 0; // e
	this.e21 = 0; // b
	this.e22 = 0; // d
	this.e23 = 0; // f
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 0;
}

/** Constructor function.
 *
 *	@param a element a (i.e. 1, 1) as described in the svg standard.
 *	@param b element b (i.e. 2, 1) as described in the svg standard.
 *	@param c element c (i.e. 1, 2) as described in the svg standard.
 *	@param d element d (i.e. 2, 2) as described in the svg standard.
 *	@param e element e (i.e. 1, 3) as described in the svg standard.
 *	@param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
	this.e11 = a;
	this.e12 = c;
	this.e13 = e;
	this.e21 = b;
	this.e22 = d;
	this.e23 = f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
	this.e11 = m.a;
	this.e12 = m.c;
	this.e13 = m.e;
	this.e21 = m.b;
	this.e22 = m.d;
	this.e23 = m.f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param e11 element 1, 1 of the matrix.
 *	@param e12 element 1, 2 of the matrix.
 *	@param e13 element 1, 3 of the matrix.
 *	@param e21 element 2, 1 of the matrix.
 *	@param e22 element 2, 2 of the matrix.
 *	@param e23 element 2, 3 of the matrix.
 *	@param e31 element 3, 1 of the matrix.
 *	@param e32 element 3, 2 of the matrix.
 *	@param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;

	return this;
}

/** Constructor function.
 *
 *	@param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
	str = attrString.substr(7, attrString.length - 8);

	str = str.trim();

	strArray = str.split(&quot;,&quot;);

	// Opera does not use commas to separate the values of the matrix, only spaces.
	if (strArray.length != 6)
		strArray = str.split(&quot; &quot;);

	this.e11 = parseFloat(strArray[0]);
	this.e21 = parseFloat(strArray[1]);
	this.e31 = 0;
	this.e12 = parseFloat(strArray[2]);
	this.e22 = parseFloat(strArray[3]);
	this.e32 = 0;
	this.e13 = parseFloat(strArray[4]);
	this.e23 = parseFloat(strArray[5]);
	this.e33 = 1;

	return this;
}

/** Output function
 *
 *	@return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
	return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *	@return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
	out = new matrixSVG();

	det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

	out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
	out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
	out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
	out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
	out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
	out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
	out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
	out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
	out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

	return out;
}

/** Matrix multiplication.
 *
 *	@param op another svg matrix
 *	@return this * op
 */
matrixSVG.prototype.mult = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
	out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
	out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
	out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
	out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
	out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
	out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
	out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
	out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

	return out;
}

/** Matrix addition.
 *
 *	@param op another svg matrix
 *	@return this + op
 */
matrixSVG.prototype.add = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 + op.e11;
	out.e12 = this.e12 + op.e12;
	out.e13 = this.e13 + op.e13;
	out.e21 = this.e21 + op.e21;
	out.e22 = this.e22 + op.e22;
	out.e23 = this.e23 + op.e23;
	out.e31 = this.e31 + op.e31;
	out.e32 = this.e32 + op.e32;
	out.e33 = this.e33 + op.e33;

	return out;
}

/** Matrix mixing.
 *
 *	@param op another svg matrix
 *	@parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *	@return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
	contribThis = 1.0 - contribOp;
	out = new matrixSVG();

	out.e11 = contribThis * this.e11 + contribOp * op.e11;
	out.e12 = contribThis * this.e12 + contribOp * op.e12;
	out.e13 = contribThis * this.e13 + contribOp * op.e13;
	out.e21 = contribThis * this.e21 + contribOp * op.e21;
	out.e22 = contribThis * this.e22 + contribOp * op.e22;
	out.e23 = contribThis * this.e23 + contribOp * op.e23;
	out.e31 = contribThis * this.e31 + contribOp * op.e31;
	out.e32 = contribThis * this.e32 + contribOp * op.e32;
	out.e33 = contribThis * this.e33 + contribOp * op.e33;

	return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
	return this.replace(/^\s+|\s+$/g, '');
}

</script>
</svg>
